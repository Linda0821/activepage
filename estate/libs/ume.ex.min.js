"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** Class representing a specific Announcement model. 公告物件
 *
 * @property {string}  Title      - 標題
 * @property {string}  Description   - 描述
 * @property {string}  Url  - URL
 * @property {Date}  Time - 時間
 * @property {number}  ExchangeRate - 匯率
*/
var Announcement = function (_DroiBaaS$DroiObject) {
    _inherits(Announcement, _DroiBaaS$DroiObject);

    /**
     * Create a Announcement.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Announcement() {
        _classCallCheck(this, Announcement);

        return _possibleConstructorReturn(this, (Announcement.__proto__ || Object.getPrototypeOf(Announcement)).call(this, "Announcement"));
    }
    /**
     * Create a Announcement.
     * @static
     * @return {Announcement} New Announcement instance.
     */


    _createClass(Announcement, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the Announcement table. 查詢Announcement表, 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Announcement>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Announcement();
        }
    }, {
        key: "getAnnouncementList",
        value: function getAnnouncementList(limit, offset) {
            return regeneratorRuntime.async(function getAnnouncementList$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            return _context.abrupt("return", query("Announcement", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Announcement;
}(DroiBaaS.DroiObject);

Object.defineProperty(Announcement.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(Announcement.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    set: function set(v) {
        this.setValue("Description", v);
    },
    enumerable: true
});

Object.defineProperty(Announcement.prototype, "Time", {
    get: function get() {
        return this.getValue("Time");
    },
    set: function set(v) {
        this.setValue("Time", v);
    },
    enumerable: true
});

Object.defineProperty(Announcement.prototype, "Url", {
    get: function get() {
        return this.getValue("Url");
    },
    set: function set(v) {
        this.setValue("Url", v);
    },
    enumerable: true
});

Object.defineProperty(Announcement.prototype, "ExchangeRate", {
    get: function get() {
        return this.getValue("ExchangeRate");
    },
    set: function set(v) {
        this.setValue("ExchangeRate", v);
    },
    enumerable: true
});
/** Class representing a specific Apprentice model. 師徒關係
 *
 * @property {string}  MasterObjectId      - 師父用戶_Id
 * @property {string}  ApprenticeObjectId   - 徒弟用戶_Id
 * @property {string}  ApprenticeName  - 徒弟名稱
 * @property {number}  Coin - 徒弟已貢獻的金幣
 * @property {string}  Status - 徒弟的狀態
 * @property {string}  Phone - 徒弟的手機
*/

var Apprentice = function (_DroiBaaS$DroiObject2) {
    _inherits(Apprentice, _DroiBaaS$DroiObject2);

    /**
     * Create a Apprentice.
     * @constructor
     */
    function Apprentice() {
        _classCallCheck(this, Apprentice);

        return _possibleConstructorReturn(this, (Apprentice.__proto__ || Object.getPrototypeOf(Apprentice)).call(this, "Apprentice"));
    }

    /**
     * Create a Apprentice.
     * @static
     * @return {Apprentice} New Apprentice instance.
     */


    _createClass(Apprentice, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get activated Apprentice list. 查詢狀態是激活的Apprentice (Status:activated), 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Apprentice>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Apprentice();
        }
    }, {
        key: "getActivateList",
        value: function getActivateList(limit, offset) {
            var curUser, cond;
            return regeneratorRuntime.async(function getActivateList$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            curUser = UMeUser.getCurrentUser();

                            if (!(curUser == null || !curUser.isLoggedIn() || curUser.isAnonymous())) {
                                _context2.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context2.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond = DroiBaaS.DroiCondition.eq("Status", "activated");
                            return _context2.abrupt("return", query("Apprentice", cond, limit, offset, defaultOrder));

                        case 6:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get awaken Apprentice list. 查詢狀態是喚醒(awaken)的Apprentice (Status:awaken), 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Apprentice>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }, {
        key: "getAwakenList",
        value: function getAwakenList(limit, offset) {
            var curUser, cond;
            return regeneratorRuntime.async(function getAwakenList$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            curUser = UMeUser.getCurrentUser();

                            if (!(curUser == null || !curUser.isLoggedIn() || curUser.isAnonymous())) {
                                _context3.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context3.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond = DroiBaaS.DroiCondition.eq("Status", "awaken");
                            return _context3.abrupt("return", query("Apprentice", cond, limit, offset, defaultOrder));

                        case 6:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get Apprentice list. 查詢Apprentice表, 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Apprentice>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }, {
        key: "queryList",
        value: function queryList(limit, offset) {
            var curUser;
            return regeneratorRuntime.async(function queryList$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            curUser = UMeUser.getCurrentUser();

                            if (!(curUser == null || !curUser.isLoggedIn() || curUser.isAnonymous())) {
                                _context4.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context4.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            return _context4.abrupt("return", query("Apprentice", null, limit, offset, defaultOrder));

                        case 5:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Call cloudcode to wakeup asleep apprentices. 喚醒沈睡中的徒弟們。
         *
         * @static
         * @async
         * @return {Promise} 空的 Promise 物件。
         * @throws {DroiError} 包含 "Code", "Message" 的其錯誤碼和訊息
         */

    }, {
        key: "wakeUpApprentice",
        value: function wakeUpApprentice() {
            var curUser, data, raw, res;
            return regeneratorRuntime.async(function wakeUpApprentice$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            curUser = UMeUser.getCurrentUser();

                            if (!(curUser == null || !curUser.isLoggedIn() || curUser.isAnonymous())) {
                                _context5.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context5.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            data = {};
                            _context5.next = 7;
                            return regeneratorRuntime.awrap(DroiBaaS.DroiCloud.callRestApi(CCApiKey, "/api/v2/apprentice/wakeup", DroiBaaS.DroiHttpMethod.POST, JSON.stringify(data), curUser.sessionToken));

                        case 7:
                            raw = _context5.sent;
                            res = JSON.parse(raw);

                            if (!(res["Code"] != 0)) {
                                _context5.next = 11;
                                break;
                            }

                            return _context5.abrupt("return", Promise.reject(new DroiBaaS.DroiError(res["Code"], res["Message"])));

                        case 11:
                            return _context5.abrupt("return", Promise.resolve());

                        case 12:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Apprentice;
}(DroiBaaS.DroiObject);

Object.defineProperty(Apprentice.prototype, "MasterObjectId", {
    get: function get() {
        return this.getValue("MasterObjectId");
    },
    // set: function(v) {
    //     this.setValue("MasterObjectId", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Apprentice.prototype, "ApprenticeObjectId", {
    get: function get() {
        return this.getValue("ApprenticeObjectId");
    },
    // set: function(v) {
    //     this.setValue("ApprenticeObjectId", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Apprentice.prototype, "ApprenticeName", {
    get: function get() {
        return this.getValue("ApprenticeName");
    },
    // set: function(v) {
    //     this.setValue("ApprenticeName", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Apprentice.prototype, "Coin", {
    get: function get() {
        return this.getValue("Coin");
    },
    // set: function(v) {
    //     this.setValue("Coin", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Apprentice.prototype, "Status", {
    get: function get() {
        return this.getValue("Status");
    },
    // set: function(v) {
    //     this.setValue("Status", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Apprentice.prototype, "Phone", {
    get: function get() {
        return this.getValue("Phone");
    },
    // set: function(v) {
    //     this.setValue("Phone", v);
    // },
    enumerable: true,
    configurable: false
});
/** Class representing a specific AwakeApprenticeRule model. 喚醒徒弟規則
 *
 * @property {string}  Title      - 標題
 * @property {string}  H_Title   - H標題
 * @property {array.<string>}  Rule  - 規則列表
*/

var AwakeApprenticeRule = function (_DroiBaaS$DroiObject3) {
    _inherits(AwakeApprenticeRule, _DroiBaaS$DroiObject3);

    /**
     * Create a AwakeApprenticeRule.
     * @constructor
     */
    function AwakeApprenticeRule() {
        _classCallCheck(this, AwakeApprenticeRule);

        return _possibleConstructorReturn(this, (AwakeApprenticeRule.__proto__ || Object.getPrototypeOf(AwakeApprenticeRule)).call(this, "AwakeApprenticeRule"));
    }

    /**
     * Create a AwakeApprenticeRule.
     * @static
     * @return {AwakeApprenticeRule} New AwakeApprenticeRule instance.
     */


    _createClass(AwakeApprenticeRule, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the AwakeApprenticeRule table. 查詢全部喚醒師徒規則, 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<AwakeApprenticeRule>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new AwakeApprenticeRule();
        }
    }, {
        key: "getRuleList",
        value: function getRuleList(limit, offset) {
            return regeneratorRuntime.async(function getRuleList$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            return _context6.abrupt("return", query("AwakeApprenticeRule", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context6.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return AwakeApprenticeRule;
}(DroiBaaS.DroiObject);

Object.defineProperty(AwakeApprenticeRule.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    // set: function(v) {
    //     this.setValue("Title", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(AwakeApprenticeRule.prototype, "H_Title", {
    get: function get() {
        return this.getValue("H_Title");
    },
    // set: function(v) {
    //     this.setValue("H_Title", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(AwakeApprenticeRule.prototype, "Rule", {
    get: function get() {
        return this.getValue("Rule");
    },
    // set: function(v) {
    //     this.setValue("Rule", v);
    // },
    enumerable: true,
    configurable: false
});
/** Class representing a specific Banner model. 橫幅式廣告
 *
 * @property {string}  Title      - 標題
 * @property {string}  DetailUrl   - 細節Url
 * @property {string}  BannerUrl  - 廣告URL
*/

var Banner = function (_DroiBaaS$DroiObject4) {
    _inherits(Banner, _DroiBaaS$DroiObject4);

    /**
     * Create a Banner.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Banner() {
        _classCallCheck(this, Banner);

        return _possibleConstructorReturn(this, (Banner.__proto__ || Object.getPrototypeOf(Banner)).call(this, "Banner"));
    }
    /**
     * Create a Banner.
     * @static
     * @return {Banner} New Banner instance.
     */


    _createClass(Banner, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the Banner table. 查詢Banner表, 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Banner>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Banner();
        }
    }, {
        key: "getBannerList",
        value: function getBannerList(limit, offset) {
            return regeneratorRuntime.async(function getBannerList$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            return _context7.abrupt("return", query("Banner", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context7.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Banner;
}(DroiBaaS.DroiObject);

Object.defineProperty(Banner.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(Banner.prototype, "DetailUrl", {
    get: function get() {
        return this.getValue("DetailUrl");
    },
    set: function set(v) {
        this.setValue("DetailUrl", v);
    },
    enumerable: true
});

Object.defineProperty(Banner.prototype, "BannerUrl", {
    get: function get() {
        return this.getValue("BannerUrl");
    },
    set: function set(v) {
        this.setValue("BannerUrl", v);
    },
    enumerable: true
});

/** Class representing a specific CoinTransaction model. 充值金幣的紀錄
 *
 * @property {string}  Title      - 標題
 * @property {string}  UserObjectId   - 用戶_Id
 * @property {number}  Source  - 提現數量
 * @property {number}  Target  - 獲得數量
 * @property {number}  Rate  - 匯率
 * @property {number}  Type  - 交易類型
 * @property {Date}  Time - 時間
 */

var CoinTransaction = function (_DroiBaaS$DroiObject5) {
    _inherits(CoinTransaction, _DroiBaaS$DroiObject5);

    /**
     * Create a CoinTransaction.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function CoinTransaction() {
        _classCallCheck(this, CoinTransaction);

        return _possibleConstructorReturn(this, (CoinTransaction.__proto__ || Object.getPrototypeOf(CoinTransaction)).call(this, "CoinTransaction"));
    }

    /**
     * Create a CoinTransaction.
     * @static
     * @return {CoinTransaction} New CoinTransaction instance.
     */


    _createClass(CoinTransaction, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get CoinTransaction list of the current user. 查詢現在使用者的金幣紀錄清單. 按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<CoinTransaction>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new CoinTransaction();
        }
    }, {
        key: "getUserTransactionsList",
        value: function getUserTransactionsList(limit, offset) {
            var user, cond;
            return regeneratorRuntime.async(function getUserTransactionsList$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            user = UMeUser.getCurrentUser();

                            if (!(user == null || !user.isLoggedIn() || user.isAnonymous())) {
                                _context8.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context8.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond = DroiBaaS.DroiCondition.eq("UserObjectId", user.objectId());
                            return _context8.abrupt("return", query("CoinTransaction", cond, limit, offset, defaultOrder));

                        case 6:
                        case "end":
                            return _context8.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return CoinTransaction;
}(DroiBaaS.DroiObject);

Object.defineProperty(CoinTransaction.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    // set: function(v) {
    //     this.setValue("Title", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(CoinTransaction.prototype, "UserObjectId", {
    get: function get() {
        return this.getValue("UserObjectId");
    },
    // set: function(v) {
    //     this.setValue("UserObjectId", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(CoinTransaction.prototype, "Target", {
    get: function get() {
        return this.getValue("Target");
    },
    // set: function(v) {
    //     this.setValue("Target", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(CoinTransaction.prototype, "Source", {
    get: function get() {
        return this.getValue("Source");
    },
    // set: function(v) {
    //     this.setValue("Source", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(CoinTransaction.prototype, "Rate", {
    get: function get() {
        return this.getValue("Rate");
    },
    // set: function(v) {
    //     this.setValue("Rate", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(CoinTransaction.prototype, "Type", {
    get: function get() {
        return this.getValue("Type");
    },
    // set: function(v) {
    //     this.setValue("Type", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(CoinTransaction.prototype, "Time", {
    get: function get() {
        return this.getValue("Time");
    },
    // set: function(v) {
    //     this.setValue("Time", v);
    // },
    enumerable: true,
    configurable: false
});

/** Class representing a specific FAQ model. 常問問題
 *
 * @property {string}  Title      - 標題
 * @property {string}  Description   - 描述
 * @property {number}  Order  - 排序
 * @property {DroiBaaS.DroiFile}  Image - 圖檔
 * @property {boolean}  Enable - 是否啟用
*/

var FAQ = function (_DroiBaaS$DroiObject6) {
    _inherits(FAQ, _DroiBaaS$DroiObject6);

    /**
     * Create a FAQ.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function FAQ() {
        _classCallCheck(this, FAQ);

        return _possibleConstructorReturn(this, (FAQ.__proto__ || Object.getPrototypeOf(FAQ)).call(this, "FAQ"));
    }
    /**
     * Create a FAQ.
     * @static
     * @return {FAQ} New FAQ instance.
     */


    _createClass(FAQ, [{
        key: "save",


        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the FAQ table. 查詢常見問題列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<FAQ>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new FAQ();
        }
    }, {
        key: "getFAQList",
        value: function getFAQList(limit, offset) {
            return regeneratorRuntime.async(function getFAQList$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            return _context9.abrupt("return", query("FAQ", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context9.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return FAQ;
}(DroiBaaS.DroiObject);

Object.defineProperty(FAQ.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(FAQ.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    set: function set(v) {
        this.setValue("Description", v);
    },
    enumerable: true
});

Object.defineProperty(FAQ.prototype, "Order", {
    get: function get() {
        return this.getValue("Order");
    },
    set: function set(v) {
        this.setValue("Order", v);
    },
    enumerable: true
});

Object.defineProperty(FAQ.prototype, "Image", {
    get: function get() {
        return this.getValue("Image");
    },
    set: function set(v) {
        this.setValue("Image", v);
    },
    enumerable: true
});

Object.defineProperty(FAQ.prototype, "Enable", {
    get: function get() {
        return this.getValue("Enable");
    },
    set: function set(v) {
        this.setValue("Enable", v);
    },
    enumerable: true
});
/** Class representing a specific Home model. 首頁資料
 *
 * @property {string}  Title      - 標題
 * @property {string}  Info   - 資訊
 * @property {string}  Url  - URL
 * @property {string}  Location  - 資料位置, 有 "Top"與"Center"
 * @property {number}  Order - 排序
 * @property {boolean}  Activate - 是否啟用
 */

var Home = function (_DroiBaaS$DroiObject7) {
    _inherits(Home, _DroiBaaS$DroiObject7);

    /**
     * Create a Home.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Home() {
        _classCallCheck(this, Home);

        return _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, "Home"));
    }
    /**
     * Create a Home.
     * @static
     * @return {Home} New Home instance.
     */


    _createClass(Home, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get activated Home list. 查詢首頁資料列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Home>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Home();
        }
    }, {
        key: "getHomeList",
        value: function getHomeList(limit, offset) {
            var cond;
            return regeneratorRuntime.async(function getHomeList$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            cond = DroiBaaS.DroiCondition.eq("Activate", true);
                            return _context10.abrupt("return", query("Home", cond, limit, offset, defaultOrder));

                        case 2:
                        case "end":
                            return _context10.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get activated and "Location:Top" list. 查詢TOP位址的首頁資料。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Home>} - The list of selected object.
         */

    }, {
        key: "getTopHomeList",
        value: function getTopHomeList(limit, offset) {
            var cond1, cond2, cond;
            return regeneratorRuntime.async(function getTopHomeList$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            cond1 = DroiBaaS.DroiCondition.eq("Activate", true);
                            cond2 = DroiBaaS.DroiCondition.eq("Location", "Top");
                            cond = cond1.and(cond2);
                            return _context11.abrupt("return", query("Home", cond, limit, offset, defaultOrder));

                        case 4:
                        case "end":
                            return _context11.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get activated and "Location:Center" Home list. 查詢Center位址的首頁資料。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Home>} - The list of selected object.
         */

    }, {
        key: "getCenterHomeList",
        value: function getCenterHomeList(limit, offset) {
            var cond1, cond2, cond;
            return regeneratorRuntime.async(function getCenterHomeList$(_context12) {
                while (1) {
                    switch (_context12.prev = _context12.next) {
                        case 0:
                            cond1 = DroiBaaS.DroiCondition.eq("Activate", true);
                            cond2 = DroiBaaS.DroiCondition.eq("Location", "Center");
                            cond = cond1.and(cond2);
                            return _context12.abrupt("return", query("Home", cond, limit, offset, defaultOrder));

                        case 4:
                        case "end":
                            return _context12.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Home;
}(DroiBaaS.DroiObject);

Object.defineProperty(Home.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(Home.prototype, "Info", {
    get: function get() {
        return this.getValue("Info");
    },
    set: function set(v) {
        this.setValue("Info", v);
    },
    enumerable: true
});

Object.defineProperty(Home.prototype, "Url", {
    get: function get() {
        return this.getValue("Url");
    },
    set: function set(v) {
        this.setValue("Url", v);
    },
    enumerable: true
});

Object.defineProperty(Home.prototype, "Location", {
    get: function get() {
        return this.getValue("Location");
    },
    set: function set(v) {
        this.setValue("Location", v);
    },
    enumerable: true
});

Object.defineProperty(Home.prototype, "Order", {
    get: function get() {
        return this.getValue("Order");
    },
    set: function set(v) {
        this.setValue("Order", v);
    },
    enumerable: true
});

Object.defineProperty(Home.prototype, "Activate", {
    get: function get() {
        return this.getValue("Activate");
    },
    set: function set(v) {
        this.setValue("Activate", v);
    },
    enumerable: true
});
/** Class representing a specific Hot model. 熱詞
 *
 * @property {string}  Title      - 標題
 * @property {string}  Description   - 描述
 * @property {string}  Url  - Url
 * @property {string}  UrlType  - Url type
 * @property {Date}    Time - 時間
*/

var Hot = function (_DroiBaaS$DroiObject8) {
    _inherits(Hot, _DroiBaaS$DroiObject8);

    /**
     * Create a Hot.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Hot() {
        _classCallCheck(this, Hot);

        return _possibleConstructorReturn(this, (Hot.__proto__ || Object.getPrototypeOf(Hot)).call(this, "Hot"));
    }
    /**
     * Create a Hot.
     * @static
     * @return {Hot} New Hot instance.
     */


    _createClass(Hot, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the Hot table. 查詢熱詞資料列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Hot>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Hot();
        }
    }, {
        key: "getHotList",
        value: function getHotList(limit, offset) {
            return regeneratorRuntime.async(function getHotList$(_context13) {
                while (1) {
                    switch (_context13.prev = _context13.next) {
                        case 0:
                            return _context13.abrupt("return", query("Hot", null, limit, offset, {"Time":""}));

                        case 1:
                        case "end":
                            return _context13.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Hot;
}(DroiBaaS.DroiObject);

Object.defineProperty(Hot.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(Hot.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    set: function set(v) {
        this.setValue("Description", v);
    },
    enumerable: true
});

Object.defineProperty(Hot.prototype, "Time", {
    get: function get() {
        return this.getValue("Time");
    },
    set: function set(v) {
        this.setValue("Time", v);
    },
    enumerable: true
});

Object.defineProperty(Hot.prototype, "Url", {
    get: function get() {
        return this.getValue("Url");
    },
    set: function set(v) {
        this.setValue("Url", v);
    },
    enumerable: true
});

Object.defineProperty(Hot.prototype, "UrlType", {
    get: function get() {
        return this.getValue("UrlType");
    },
    set: function set(v) {
        this.setValue("UrlType", v);
    },
    enumerable: true
});
/** Class representing a specific Loop model.  跑馬燈
 *
 * @property {string}  Title  - 標題
 * @property {string}  Type   - 跑馬燈型態, 有"default"與"system"
 * @property {string}  Uri    - 統一資源標誌符
*/

var Loop = function (_DroiBaaS$DroiObject9) {
    _inherits(Loop, _DroiBaaS$DroiObject9);

    /**
     * Create a Loop.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Loop() {
        _classCallCheck(this, Loop);

        return _possibleConstructorReturn(this, (Loop.__proto__ || Object.getPrototypeOf(Loop)).call(this, "Loop"));
    }
    /**
     * Create a Loop.
     * @static
     * @return {Loop} New Loop instance.
     */


    _createClass(Loop, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the Loop table. 查詢跑馬燈資料列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Loop>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Loop();
        }
    }, {
        key: "getLoopList",
        value: function getLoopList(limit, offset) {
            return regeneratorRuntime.async(function getLoopList$(_context14) {
                while (1) {
                    switch (_context14.prev = _context14.next) {
                        case 0:
                            return _context14.abrupt("return", query("Loop", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context14.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Loop;
}(DroiBaaS.DroiObject);

Object.defineProperty(Loop.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(Loop.prototype, "Type", {
    get: function get() {
        return this.getValue("Type");
    },
    set: function set(v) {
        this.setValue("Type", v);
    },
    enumerable: true
});

Object.defineProperty(Loop.prototype, "Uri", {
    get: function get() {
        return this.getValue("Uri");
    },
    set: function set(v) {
        this.setValue("Uri", v);
    },
    enumerable: true
});
/** Class representing a specific MARule model. 師徒規則
 *
 * @property {string}  Title      - 標題
 * @property {string}  Description   - 描述
 * @property {string}  BtnValue  - 按鈕值
 * @property {Date}  Time - 時間
 */

var MARule = function (_DroiBaaS$DroiObject10) {
    _inherits(MARule, _DroiBaaS$DroiObject10);

    /**
     * Create a MARule.
     * @constructor
     * @static
     */
    function MARule() {
        _classCallCheck(this, MARule);

        return _possibleConstructorReturn(this, (MARule.__proto__ || Object.getPrototypeOf(MARule)).call(this, "MARule"));
    }
    /**
     * Create a MARule.
     * @static
     * @return {MARule} New MARule instance.
     */


    _createClass(MARule, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the MARule table. 查詢師徒規則資料列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<MARule>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new MARule();
        }
    }, {
        key: "getRuleList",
        value: function getRuleList(limit, offset) {
            return regeneratorRuntime.async(function getRuleList$(_context15) {
                while (1) {
                    switch (_context15.prev = _context15.next) {
                        case 0:
                            return _context15.abrupt("return", query("MARule", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context15.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return MARule;
}(DroiBaaS.DroiObject);

Object.defineProperty(MARule.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    // set: function(v) {
    //     this.setValue("Title", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MARule.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    // set: function(v) {
    //     this.setValue("Description", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MARule.prototype, "Time", {
    get: function get() {
        return this.getValue("Time");
    },
    // set: function(v) {
    //     this.setValue("Time", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MARule.prototype, "BtnValue", {
    get: function get() {
        return this.getValue("BtnValue");
    },
    // set: function(v) {
    //     this.setValue("BtnValue", v);
    // },
    enumerable: true,
    configurable: false
});
/** Class representing a specific MoneyTransaction model. 每日金幣轉換成錢的紀錄
 *
 * @property {string}  Title      - 標題
 * @property {string}  UserObjectId   - 用戶_Id
 * @property {number}  Source  - 提現數量
 * @property {number}  Target  - 獲得數量
 * @property {number}  Rate  - 匯率
 * @property {number}  Type  - 交易類型
 * @property {Date}  Time - 時間
*/

var MoneyTransaction = function (_DroiBaaS$DroiObject11) {
    _inherits(MoneyTransaction, _DroiBaaS$DroiObject11);

    /**
     * Create a MoneyTransaction.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function MoneyTransaction() {
        _classCallCheck(this, MoneyTransaction);

        return _possibleConstructorReturn(this, (MoneyTransaction.__proto__ || Object.getPrototypeOf(MoneyTransaction)).call(this, "MoneyTransaction"));
    }
    /**
     * Create a MoneyTransaction.
     * @static
     * @return {MoneyTransaction} New MoneyTransaction instance.
     */


    _createClass(MoneyTransaction, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         * block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get the MoneyTransaction list of current user. 查詢現在使用者的金幣轉換紀錄。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<MoneyTransaction>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new MoneyTransaction();
        }
    }, {
        key: "getUserTransactionsList",
        value: function getUserTransactionsList(limit, offset) {
            var user, cond;
            return regeneratorRuntime.async(function getUserTransactionsList$(_context16) {
                while (1) {
                    switch (_context16.prev = _context16.next) {
                        case 0:
                            user = UMeUser.getCurrentUser();

                            if (!(user == null || !user.isLoggedIn() || user.isAnonymous())) {
                                _context16.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context16.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond = DroiBaaS.DroiCondition.eq("UserObjectId", user.objectId());
                            return _context16.abrupt("return", query("MoneyTransaction", cond, limit, offset, defaultOrder));

                        case 6:
                        case "end":
                            return _context16.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return MoneyTransaction;
}(DroiBaaS.DroiObject);

Object.defineProperty(MoneyTransaction.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    // set: function(v) {
    //     this.setValue("Title", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MoneyTransaction.prototype, "UserObjectId", {
    get: function get() {
        return this.getValue("UserObjectId");
    },
    // set: function(v) {
    //     this.setValue("UserObjectId", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MoneyTransaction.prototype, "Target", {
    get: function get() {
        return this.getValue("Target");
    },
    // set: function(v) {
    //     this.setValue("Target", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MoneyTransaction.prototype, "Source", {
    get: function get() {
        return this.getValue("Source");
    },
    // set: function(v) {
    //     this.setValue("Source", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MoneyTransaction.prototype, "Rate", {
    get: function get() {
        return this.getValue("Rate");
    },
    // set: function(v) {
    //     this.setValue("Rate", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MoneyTransaction.prototype, "Type", {
    get: function get() {
        return this.getValue("Type");
    },
    // set: function(v) {
    //     this.setValue("Type", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(MoneyTransaction.prototype, "Time", {
    get: function get() {
        return this.getValue("Time");
    },
    // set: function(v) {
    //     this.setValue("Time", v);
    // },
    enumerable: true,
    configurable: false
});
/** Class representing a specific News model.  新聞
 *
 * @property {string}  Title      - 標題
 * @property {string}  UserObjectId   - 用戶_Id
 * @property {string}  Url  - Url
 * @property {Date}  Time - 時間
 */

var News = function (_DroiBaaS$DroiObject12) {
    _inherits(News, _DroiBaaS$DroiObject12);

    /**
     * Create a News.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function News() {
        _classCallCheck(this, News);

        return _possibleConstructorReturn(this, (News.__proto__ || Object.getPrototypeOf(News)).call(this, "News"));
    }
    /**
     * Create a News.
     * @static
     * @return {News} New News instance.
     */


    _createClass(News, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the News table. 查詢新聞資料。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<News>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new News();
        }
    }, {
        key: "getNewsList",
        value: function getNewsList(limit, offset) {
            return regeneratorRuntime.async(function getNewsList$(_context17) {
                while (1) {
                    switch (_context17.prev = _context17.next) {
                        case 0:
                            return _context17.abrupt("return", query("News", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context17.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return News;
}(DroiBaaS.DroiObject);

Object.defineProperty(News.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(News.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    set: function set(v) {
        this.setValue("Description", v);
    },
    enumerable: true
});

Object.defineProperty(News.prototype, "Time", {
    get: function get() {
        return this.getValue("Time");
    },
    set: function set(v) {
        this.setValue("Time", v);
    },
    enumerable: true
});

Object.defineProperty(News.prototype, "Url", {
    get: function get() {
        return this.getValue("Url");
    },
    set: function set(v) {
        this.setValue("Url", v);
    },
    enumerable: true
});
/** Class representing a specific Notification model.  通知
 *
 * @property {string}  Title      - 標題
 * @property {string}  UserObjectId   - 用戶_Id
 * @property {string}  Description      - 描述
 * @property {number}  Order   - 排序
 * @property {DroiBaaS.DroiFile}  Image  - 圖檔
 * @property {boolean}  Enable - 是否啟用
 */

var Notification = function (_DroiBaaS$DroiObject13) {
    _inherits(Notification, _DroiBaaS$DroiObject13);

    /**
     * Create a Notification.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Notification() {
        _classCallCheck(this, Notification);

        return _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this, "Notification"));
    }
    /**
     * Create a Notification.
     * @static
     * @return {Notification} New Notification instance.
     */


    _createClass(Notification, [{
        key: "save",

        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the Notification table. 查詢使用者的通知清單。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Notification>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Notification();
        }
    }, {
        key: "getUserNotificationList",
        value: function getUserNotificationList(limit, offset) {
            var user, cond;
            return regeneratorRuntime.async(function getUserNotificationList$(_context18) {
                while (1) {
                    switch (_context18.prev = _context18.next) {
                        case 0:
                            user = UMeUser.getCurrentUser();

                            if (!(user == null || !user.isLoggedIn() || user.isAnonymous())) {
                                _context18.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context18.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond = DroiBaaS.DroiCondition.eq("UserObjectId", user.objectId());
                            return _context18.abrupt("return", query("Notification", cond, limit, offset, defaultOrder));

                        case 6:
                        case "end":
                            return _context18.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Notification;
}(DroiBaaS.DroiObject);

Object.defineProperty(Notification.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    set: function set(v) {
        this.setValue("Title", v);
    },
    enumerable: true
});

Object.defineProperty(Notification.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    set: function set(v) {
        this.setValue("Description", v);
    },
    enumerable: true
});

Object.defineProperty(Notification.prototype, "UserObjectId", {
    get: function get() {
        return this.getValue("UserObjectId");
    },
    set: function set(v) {
        this.setValue("UserObjectId", v);
    },
    enumerable: true
});

Object.defineProperty(Notification.prototype, "Order", {
    get: function get() {
        return this.getValue("Order");
    },
    set: function set(v) {
        this.setValue("Order", v);
    },
    enumerable: true
});

Object.defineProperty(Notification.prototype, "Enable", {
    get: function get() {
        return this.getValue("Enable");
    },
    set: function set(v) {
        this.setValue("Enable", v);
    },
    enumerable: true
});

Object.defineProperty(Notification.prototype, "Image", {
    get: function get() {
        return this.getValue("Image");
    },
    set: function set(v) {
        this.setValue("Image", v);
    },
    enumerable: true
});
/** Class representing a specific Task model. 任務
 *
 * @property {string}  Title      - 標題
 * @property {string}  EventId   - 事件Id
 * @property {number}  TaskType  - 事件類別, TASK_TYPE_SIGN:0, TASK_TYPE_NEWS:1, TASK_TYPE_INVITE:2, TASK_TYPE_DAIILY:3, TASK_TYPE_SYSTEM:4
 * @property {number}  Coin - 完成事件時, 用戶可獲得的金幣
 * @property {number}  UpCoin  - 完成事件時, 用戶的師傅可獲得的金幣
 * @property {number}  Money   - 完成事件時, 用戶可獲得的金錢
 * @property {boolean} Repeatable  - 是否可重複
 * @property {boolean} GoPublic - 是否開放
 * @property {number}  Order   - 排序
 * @property {number}  Params1  - 參數1
 * @property {number}  Params2  - 參數2
 * @property {number}  DailyLimit  - 日常任務每日完成次数上限
 * @property {string}  TaskRelation - 任務關係
 * @property {string}  Description - 任務描述
*/

var Task = function (_DroiBaaS$DroiObject14) {
    _inherits(Task, _DroiBaaS$DroiObject14);

    /**
     * Create a Task.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function Task() {
        _classCallCheck(this, Task);

        return _possibleConstructorReturn(this, (Task.__proto__ || Object.getPrototypeOf(Task)).call(this, "Task"));
    }
    /**
     * Create a Task.
     * @static
     * @return {Task} New Task instance.
     */


    _createClass(Task, [{
        key: "save",


        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get list from the Task table. 查詢任務資料。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Task>} - The list of selected object.
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new Task();
        }
    }, {
        key: "getTaskList",
        value: function getTaskList(limit, offset) {
            return regeneratorRuntime.async(function getTaskList$(_context19) {
                while (1) {
                    switch (_context19.prev = _context19.next) {
                        case 0:
                            return _context19.abrupt("return", query("Task", null, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context19.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get Sign Type Task List. 查詢簽到任務。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Task>} - The list of selected object.
         */

    }, {
        key: "getSignTaskList",
        value: function getSignTaskList(limit, offset) {
            var cond;
            return regeneratorRuntime.async(function getSignTaskList$(_context20) {
                while (1) {
                    switch (_context20.prev = _context20.next) {
                        case 0:
                            cond = DroiBaaS.DroiCondition.eq("TaskType", 0);
                            return _context20.abrupt("return", query("Task", cond, limit, offset, defaultOrder));

                        case 2:
                        case "end":
                            return _context20.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get Newbies Type Task List. 查詢新手任務。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Task>} - The list of selected object.
         */

    }, {
        key: "getNewbiesTaskList",
        value: function getNewbiesTaskList(limit, offset) {
            var cond;
            return regeneratorRuntime.async(function getNewbiesTaskList$(_context21) {
                while (1) {
                    switch (_context21.prev = _context21.next) {
                        case 0:
                            cond = DroiBaaS.DroiCondition.eq("TaskType", 1);
                            return _context21.abrupt("return", query("Task", cond, limit, offset, defaultOrder));

                        case 2:
                        case "end":
                            return _context21.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get Invite Type Task List. 查詢邀請類任務。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Task>} - The list of selected object.
         */

    }, {
        key: "getInviteTaskList",
        value: function getInviteTaskList(limit, offset) {
            var cond;
            return regeneratorRuntime.async(function getInviteTaskList$(_context22) {
                while (1) {
                    switch (_context22.prev = _context22.next) {
                        case 0:
                            cond = DroiBaaS.DroiCondition.eq("TaskType", 2);
                            return _context22.abrupt("return", query("Task", cond, limit, offset, defaultOrder));

                        case 2:
                        case "end":
                            return _context22.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get Daily Type Task List. 查詢日常任務。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Task>} - The list of selected object.
         */

    }, {
        key: "getDailyTaskList",
        value: function getDailyTaskList(limit, offset) {
            var cond;
            return regeneratorRuntime.async(function getDailyTaskList$(_context23) {
                while (1) {
                    switch (_context23.prev = _context23.next) {
                        case 0:
                            cond = DroiBaaS.DroiCondition.eq("TaskType", 3);
                            return _context23.abrupt("return", query("Task", cond, limit, offset, defaultOrder));

                        case 2:
                        case "end":
                            return _context23.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get System Type Task List. 查詢系統任務。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Task>} - The list of selected object.
         */

    }, {
        key: "getSysTaskList",
        value: function getSysTaskList(limit, offset) {
            var cond;
            return regeneratorRuntime.async(function getSysTaskList$(_context24) {
                while (1) {
                    switch (_context24.prev = _context24.next) {
                        case 0:
                            cond = DroiBaaS.DroiCondition.eq("TaskType", 4);
                            return _context24.abrupt("return", query("Task", cond, limit, offset, defaultOrder));

                        case 2:
                        case "end":
                            return _context24.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return Task;
}(DroiBaaS.DroiObject);

Object.defineProperty(Task.prototype, "Title", {
    get: function get() {
        return this.getValue("Title");
    },
    // set: function(v) {
    //     this.setValue("Title", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "EventId", {
    get: function get() {
        return this.getValue("EventId");
    },
    // set: function(v) {
    //     this.setValue("EventId", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "TaskType", {
    get: function get() {
        return this.getValue("TaskType");
    },
    // set: function(v) {
    //     this.setValue("TaskType", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Coin", {
    get: function get() {
        return this.getValue("Coin");
    },
    // set: function(v) {
    //     this.setValue("Coin", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "UpCoin", {
    get: function get() {
        return this.getValue("UpCoin");
    },
    // set: function(v) {
    //     this.setValue("UpCoin", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Money", {
    get: function get() {
        return this.getValue("Money");
    },
    // set: function(v) {
    //     this.setValue("Money", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Repeatable", {
    get: function get() {
        return this.getValue("Repeatable");
    },
    // set: function(v) {
    //     this.setValue("Repeatable", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "GoPublic", {
    get: function get() {
        return this.getValue("GoPublic");
    },
    // set: function(v) {
    //     this.setValue("GoPublic", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Order", {
    get: function get() {
        return this.getValue("Order");
    },
    // set: function(v) {
    //     this.setValue("Order", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Params1", {
    get: function get() {
        return this.getValue("Params1");
    },
    // set: function(v) {
    //     this.setValue("Params", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Params2", {
    get: function get() {
        return this.getValue("Params2");
    },
    // set: function(v) {
    //     this.setValue("Params", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "TaskRelation", {
    get: function get() {
        return this.getValue("TaskRelation");
    },
    // set: function(v) {
    //     this.setValue("TaskRelation", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(Task.prototype, "Description", {
    get: function get() {
        return this.getValue("Description");
    },
    // set: function(v) {
    //     this.setValue("Description", v);
    // },
    enumerable: true,
    configurable: false
});
/** @module Core */

// /** The UMe sandbox appId of the DroiBaaS. */
// const AppId = "6a8umbzhD4C9dGoEJAcjzC9eXQ4EmYKslQDyguMf";
// // /** The default apiKey of the DroiBaaS for CRUD. */
// const ApiKey = "QF3D17Nog3a0ngrKWvtXHHPjZBqSCgRXIGjE_EIrXmmTa3pfbsOy3-tzMvlIPjki";
// // /** The default apiKey of the DroiBaaS for cloudcode. */
// const CCApiKey = "R5XbNb9fG8Xji7wlI4TucoornD-ohrTECJtNwCWlY5rFfhGUDhF9sDjwqHwk3NsK";


/** The UMe production appId of the DroiBaaS. */
var AppId = "6a8umbzh1B4K3nJEnXKRMJJdTjvqWzhhlQC6zJcL";
// /** The default apiKey of the DroiBaaS for CRUD. */
var ApiKey = "cL8JtUC7QZWc8fa_WDDou7xZ6GWh2U7nv-uXKzUTK4XzqueFVV1V145UMJHN-eFv";
// /** The default apiKey of the DroiBaaS for cloudcode. */
var CCApiKey = "ymQTVoRxW_8Ups07qKVq8hBlRWHUGefxbBJsYbCDPJVvPI1jH4ObvSVZCQgGADaz";

// /** The UMeV6 sandbox appId of the DroiBaaS. */
// const AppId = "jtjumbzhGz0Wf3KPIgfZcoSxEr-mEOKZlQDyig0I";
// /** The default apiKey of the DroiBaaS for CRUD. */
// const ApiKey = "3eOl7V-PKK7EzFRXPH_RBRY-2BSTFZOys7DHMgpv1Ed32_nl-apuY-Ae6wmi0LOQ";
// /** The default apiKey of the DroiBaaS for cloudcode. */
// const CCApiKey = "t0GVToojf9PH6VFzFBYMx8rrrOygQW5-6T7bDON1TUBFg3-wONYRLBOnU8EB8FCB";

// /** The UMeV6 production appId of the DroiBaaS. */
// const AppId = "jtjumbzhGKfzXJhBf8d9AQw7ATgVvt4wlQC69q8C";
// // /** The default apiKey of the DroiBaaS for CRUD. */
// const ApiKey = "OsbUegA2oXUCG1PGyw1CqSyF5o4kA5mxQX9UEh135JyNCvure_mR3UD7vFXDwWV0";
// // /** The default apiKey of the DroiBaaS for cloudcode. */
// const CCApiKey = "vR6SVb9nMTeZGqcAO-ssy3AP--kXNaWrd-tgUXWK1JQD1v4UnTQvzp9PwLJ3I1_5";

// /** The sandbox appId of the TP Test. */
// const AppId = "t6etmbzhi7XBAeSAixYgJou65q6hGe6nlQBWKcAB";
// /** The default apiKey of the DroiBaaS for CRUD. */
// const ApiKey = "NBvgQ2PvQHB5-aDZosjy9ly8a_ZrMcEUE7Y3hIulGa7kctYIT41GgZFTwnTYEYn5";
// /** The default apiKey of the DroiBaaS for cloudcode. */
// const CCApiKey = "jFrQBWpqHhIqhFjrB4eU4GqdMoInkZVrLal1W2XxTNm4KLNdwVV5q5WD2sH2VyZl";


/** The default queryOrder of UMe project.
 *  預設排序 _ModifiedTime 降序：從最新到最舊。
 */
var defaultOrder = { "_ModifiedTime": false };

/** Init process of DroiCore.
 *
 * 註冊 DroiBaaS.DroiObject 的 class,
 * 初始化 Droi AppID 和 Api Key。
*/

DroiBaaS.DroiObject.registerCreateFactory("UMeUser", function () {
    return UMeUser.createUser();
});
DroiBaaS.DroiObject.registerCreateFactory("Announcement", function () {
    return Announcement.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("Apprentice", function () {
    return Apprentice.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("Banner", function () {
    return Banner.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("CoinTransaction", function () {
    return CoinTransaction.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("FAQ", function () {
    return FAQ.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("Home", function () {
    return Home.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("Hot", function () {
    return Hot.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("Loop", function () {
    return Loop.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("MARule", function () {
    return MARule.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("MoneyTransaction", function () {
    return MoneyTransaction.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("News", function () {
    return News.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("Task", function () {
    return Task.createObject();
});
DroiBaaS.DroiObject.registerCreateFactory("UserTask", function () {
    return UserTask.createObject();
});
DroiBaaS.DroiCore.initializeCore(AppId, ApiKey);

/**
     * General query function.
     *
     * @async
     * @param {string} table - The target table name.
     * @param {DroiBaaS.DroiCondition} cond - The condition of the query.
     * @param {number} limit - The return amount of this request.
     * @param {number} offset - The query offset of this request.
     * @param {object} order - object of {"field":"isAsc"}
     * @return {Array.<DroiBaaS.DroiObject>} - The list of selected object.
     */
function query(table, cond, limit, offset, order) {
    var query, k, list;
    return regeneratorRuntime.async(function query$(_context25) {
        while (1) {
            switch (_context25.prev = _context25.next) {
                case 0:
                    if (limit === null || typeof limit !== "number" || limit <= 0) limit = 200;
                    if (offset === null || typeof offset !== "number" || offset <= 0) offset = 0;

                    query = DroiBaaS.DroiQuery.create(table);

                    if (cond === null || cond === undefined) query = query.limit(limit).offset(offset);else query = query.where(cond).limit(limit).offset(offset);
                    if (order != null) {
                        for (k in order) {
                            query = query.orderBy(k, order[k]);
                        }
                    }
                    _context25.next = 7;
                    return regeneratorRuntime.awrap(query.runQuery());

                case 7:
                    list = _context25.sent;
                    return _context25.abrupt("return", list);

                case 9:
                case "end":
                    return _context25.stop();
            }
        }
    }, null, this);
}

/** Class representing a specific UMeConfig.  跑馬燈
 *
 * @property {string}  Type     - config 類型, UMeConfig.TYPE_LOOP; (跑馬燈), UMeConfig.TYPE_GLOBAL_RATE; (全域匯率)
 * @property {string}  Params   - config 參數, 會根據不同類型進行解析
 * @property {string}  Enabled  - config 是否啟用
*/

var loopCond = DroiBaaS.DroiCondition.eq("Type", "Loop").and(DroiBaaS.DroiCondition.eq("Enabled", true));
var globalRateCond = DroiBaaS.DroiCondition.eq("Type", "GlobalRate").and(DroiBaaS.DroiCondition.eq("Enabled", true));

var UMeConfig = function (_DroiBaaS$DroiObject15) {
    _inherits(UMeConfig, _DroiBaaS$DroiObject15);

    function UMeConfig() {
        _classCallCheck(this, UMeConfig);

        return _possibleConstructorReturn(this, (UMeConfig.__proto__ || Object.getPrototypeOf(UMeConfig)).apply(this, arguments));
    }

    _createClass(UMeConfig, null, [{
        key: "getLoopConfigs",

        // /**
        //  * Create a UMeConfig.
        //  * 不應該從H5 app client 創建此物件
        //  * @constructor
        //  */
        // constructor() {
        //     super("UMeConfig");
        // }
        // /**
        //  * Create a UMeConfig.
        //  * @static
        //  * @return {UMeConfig} New UMeConfig instance.
        //  */
        // static createObject() {
        //     return new UMeConfig();
        // }

        /**
         * Get loop config list from the UMeConfig table. 查詢config列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Loop>} - The list of selected object.
         */
        value: function getLoopConfigs(limit, offset) {
            return regeneratorRuntime.async(function getLoopConfigs$(_context26) {
                while (1) {
                    switch (_context26.prev = _context26.next) {
                        case 0:
                            return _context26.abrupt("return", query("UMeConfig", loopCond, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context26.stop();
                    }
                }
            }, null, this);
        }

        /**
         * Get global reate list from the UMeConfig table. 查詢config列表。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<Loop>} - The list of selected object.
         */

    }, {
        key: "getGlobalRateConfigs",
        value: function getGlobalRateConfigs(limit, offset) {
            return regeneratorRuntime.async(function getGlobalRateConfigs$(_context27) {
                while (1) {
                    switch (_context27.prev = _context27.next) {
                        case 0:
                            return _context27.abrupt("return", query("UMeConfig", globalRateCond, limit, offset, defaultOrder));

                        case 1:
                        case "end":
                            return _context27.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return UMeConfig;
}(DroiBaaS.DroiObject);

Object.defineProperty(UMeConfig.prototype, "Type", {
    get: function get() {
        return this.getValue("Type");
    },
    enumerable: true
});

Object.defineProperty(UMeConfig.prototype, "Params", {
    get: function get() {
        return this.getValue("Params");
    },
    enumerable: true
});

Object.defineProperty(UMeConfig.prototype, "Enabled", {
    get: function get() {
        return this.getValue("Enabled");
    },
    enumerable: true
});
/** Class representing a ErrorCode for UMeSDK
*/

var UMeError = function UMeError() {
    _classCallCheck(this, UMeError);
};

/**
 * OK
 */


UMeError.OK = 0;
/**
 * 未登錄UMeUser, 請檢查JsObject的token/id是否合法
 */
UMeError.NOT_LOGIN = 30001;
/**
 * 已登錄了一個User, 請先登出currentUser
 */
UMeError.ALREADY_LOGIN = 30002;
/**
 * 此User非當前登錄User
 */
UMeError.NOT_MATCH_LOGIN_USER = 30003;
/**
 * 此User是匿名用戶
 */
UMeError.IS_ANON_USER = 30004;
/**
 * 非法參數
 */
UMeError.INVALID_INPUT = 30005;
/**
 * 非法邀請碼
 */
UMeError.INVALID_INVITECODE = 30006;
/**
 * CloudCode沒回應
 * 
 */
UMeError.CLOUDCODE_NO_RESPONSE = 30007;
/**
 * 不允許的動作
 */
UMeError.BLOCK_OPERATION = 30010;
/**
 * 不合法的操作
 */
UMeError.INVALID_OPERATION = 30010;

UMeError.MSG_NOT_LOGIN = "Not logined yet";
UMeError.MSG_ALREADY_LOGIN = "User already login";
UMeError.MSG_NOT_MATCH_LOGIN_USER = "This user is not matched current login user";
UMeError.MSG_IS_ANON_USER = "Current user is anonymous which is not allowed";
UMeError.MSG_INVALID_INPUT = "Input should not be null/empty";
UMeError.MSG_BLOCK_OPERATION = "This operation is prohibited";
UMeError.MSG_MASTER_NOT_EXIST = "Target master not exists";
UMeError.MSG_CLOUDCODE_NO_RESPONSE = "No response";
UMeError.MSG_INVALID_INVITE_CODE = "Invalid invite code";

/** Class representing a specific User model. 用戶
 *
 * @property {string}  Nickname      - 暱稱
 * @property {string}  Gender   - 性別
 * @property {string}  Job  - 職業
 * @property {string}  Education - 教育逞度
 * @property {string}  InviteCode  - 邀請碼
 * @property {string}  ActivateStatus   - 啟用狀態
 * @property {string}  AwakeStatus  - 喚醒狀態
 * @property {number}  Age - 年齡
 * @property {number}  Coin   - 金幣總額
 * @property {number}  CoinFromApprentice  -徒弟貢獻的金幣總額
 * @property {number}  Balance - 錢幣總額
 * @property {number}  ExchangeRate - 匯率
 * @property {number}  Sign   - 簽到次數
 * @property {Date}    LastLoginTime  - 上次登錄時間
 * @property {DroiBaaS.DroiFile}  Icon - 用戶圖像
 * @property {number}  Prev_user_id - 舊版id
 * @property {string}  Prev_user_token  - 非空且唯一，用户唯一ID，注册成功后下发客户端
 * @property {boolean} Prev_need_bm_syn  - 书签同步标识位（1=需要同步）
 * @property {string}  Bm_version  - 舊版本號
*/

var UMeUser = function (_DroiBaaS$DroiUser) {
    _inherits(UMeUser, _DroiBaaS$DroiUser);

    /**
     * Create a UMeUser which extends DroiUser.
     * @constructor
     */
    function UMeUser() {
        _classCallCheck(this, UMeUser);

        // should set tableName here
        return _possibleConstructorReturn(this, (UMeUser.__proto__ || Object.getPrototypeOf(UMeUser)).call(this, "UMeUser"));
    }

    /**
     * sync data from DroiBaaS serverside. 從 DroiBaaS 系統資料庫同步使用者資料。
     * @async
     */


    _createClass(UMeUser, [{
        key: "sync",
        value: function sync() {
            var dobj, oldSession;
            return regeneratorRuntime.async(function sync$(_context28) {
                while (1) {
                    switch (_context28.prev = _context28.next) {
                        case 0:
                            _context28.next = 2;
                            return regeneratorRuntime.awrap(UMeUser.fetch("_User", this.objectId()));

                        case 2:
                            dobj = _context28.sent;
                            oldSession = this.session;

                            this.cloneFrom(dobj);
                            this.session = oldSession;

                        case 6:
                        case "end":
                            return _context28.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get the sign value. 取得使用者簽到次數
         *
         * @return {number} The sign value of the UMeUser.
         */

    }, {
        key: "getSign",
        value: function getSign() {
            return this.Sign;
        }
        /**
         * 請求 DroiBaaS 發出認証的 OTP
         *
         * @param {string} phoneNum, 手機號碼
         * @return {Boolean} 成功回傳 true
         * @throws {DroiError} 錯誤情況，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }, {
        key: "checkInviteCode",

        /**
         * Call cloudcode to check whether the input invite code is valid. 確認邀請碼是否有效。
         *
         * @async
         * @param {string} code - The invite code.
         * @return {Promise} 空的 Promise 物件。
         * @throws {DroiError} 錯誤情況，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */
        value: function checkInviteCode(code) {
            var data, raw, resp;
            return regeneratorRuntime.async(function checkInviteCode$(_context29) {
                while (1) {
                    switch (_context29.prev = _context29.next) {
                        case 0:
                            if (!(code == null || code.length == 0)) {
                                _context29.next = 2;
                                break;
                            }

                            return _context29.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.INVALID_INPUT, UMeError.MSG_INVALID_INPUT)));

                        case 2:
                            data = { "InviteCode": code };
                            _context29.next = 5;
                            return regeneratorRuntime.awrap(DroiBaaS.DroiCloud.callRestApi(CCApiKey, "/api/v2/user/check_invite_code", DroiBaaS.DroiHttpMethod.POST, JSON.stringify(data), this.sessionToken));

                        case 5:
                            raw = _context29.sent;
                            resp = JSON.parse(raw);

                            if (!(resp["Code"] != 0)) {
                                _context29.next = 9;
                                break;
                            }

                            return _context29.abrupt("return", Promise.reject(new DroiBaaS.DroiError(resp["Code"], resp["Message"])));

                        case 9:
                            return _context29.abrupt("return", Promise.resolve());

                        case 10:
                        case "end":
                            return _context29.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Call cloudcode to bind master by. 已存在用戶使用邀請碼綁定師父。
         *
         * @async
         * @param {string} code - The invite code.
         * @return {Promise} 空的 Promise 物件。
         * @throws {DroiError} 錯誤情況，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }, {
        key: "bindInviteCode",
        value: function bindInviteCode(code) {
            var curUser, data, raw, res;
            return regeneratorRuntime.async(function bindInviteCode$(_context30) {
                while (1) {
                    switch (_context30.prev = _context30.next) {
                        case 0:
                            if (!(code == null || code.length == 0)) {
                                _context30.next = 2;
                                break;
                            }

                            return _context30.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.INVALID_INPUT, UMeError.MSG_INVALID_INPUT)));

                        case 2:
                            curUser = UMeUser.getCurrentUser();

                            if (!(curUser == null || !curUser.isLoggedIn() || curUser.isAnonymous())) {
                                _context30.next = 8;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context30.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 8:
                            if (!(curUser.objectId() !== this.objectId())) {
                                _context30.next = 11;
                                break;
                            }

                            console.log("this user is not matched current user");
                            return _context30.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_MATCH_LOGIN_USER, UMeError.MSG_NOT_MATCH_LOGIN_USER)));

                        case 11:
                            data = { "InviteCode": code };
                            _context30.next = 14;
                            return regeneratorRuntime.awrap(DroiBaaS.DroiCloud.callRestApi(CCApiKey, "/api/v2/user/check_invite_code", DroiBaaS.DroiHttpMethod.POST, JSON.stringify(data), this.sessionToken));

                        case 14:
                            raw = _context30.sent;
                            res = JSON.parse(raw);

                            if (!(res["Code"] != 0)) {
                                _context30.next = 18;
                                break;
                            }

                            return _context30.abrupt("return", Promise.reject(new DroiBaaS.DroiError(res["Code"], res["Message"])));

                        case 18:
                            data["ObjectId"] = this.objectId();
                            _context30.next = 21;
                            return regeneratorRuntime.awrap(DroiBaaS.DroiCloud.callRestApi(CCApiKey, "/api/v2/user/establish_apprentice_relation", DroiBaaS.DroiHttpMethod.POST, JSON.stringify(data), this.sessionToken));

                        case 21:
                            raw = _context30.sent;

                            res = JSON.parse(raw);

                            if (!(res["Code"] != 0)) {
                                _context30.next = 25;
                                break;
                            }

                            return _context30.abrupt("return", Promise.reject(new DroiBaaS.DroiError(res["Code"], res["Message"])));

                        case 25:
                            return _context30.abrupt("return", Promise.resolve());

                        case 26:
                        case "end":
                            return _context30.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Create a UMeUser which extends DroiUser.
         * @static
         * @return {UMeUser} New UMeUser instance.
         */

    }, {
        key: "userSignToday",


        /**
         * Call cloudcode to do user sign. 用戶今日簽到
         *
         * @async
         * @param {string} code - The invite code.
         * @return {Promise} 空的 Promise 物件。
         * @throws {DroiError} 錯誤情況，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */
        value: function userSignToday() {
            var curUser, raw, res;
            return regeneratorRuntime.async(function userSignToday$(_context31) {
                while (1) {
                    switch (_context31.prev = _context31.next) {
                        case 0:
                            curUser = UMeUser.getCurrentUser();

                            if (!(curUser == null || !curUser.isLoggedIn() || curUser.isAnonymous())) {
                                _context31.next = 6;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context31.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 6:
                            if (!(curUser.objectId() !== this.objectId())) {
                                _context31.next = 9;
                                break;
                            }

                            console.log("this user is not matched current user");
                            return _context31.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_MATCH_LOGIN_USER, UMeError.MSG_NOT_MATCH_LOGIN_USER)));

                        case 9:
                            _context31.next = 11;
                            return regeneratorRuntime.awrap(DroiBaaS.DroiCloud.callRestApi(CCApiKey, "/api/v2/user/sign", DroiBaaS.DroiHttpMethod.POST, "", this.sessionToken));

                        case 11:
                            raw = _context31.sent;
                            res = JSON.parse(raw);

                            if (!(res["Code"] != 0)) {
                                _context31.next = 15;
                                break;
                            }

                            return _context31.abrupt("return", Promise.reject(new DroiBaaS.DroiError(res["Code"], res["Message"])));

                        case 15:
                            return _context31.abrupt("return", Promise.resolve());

                        case 16:
                        case "end":
                            return _context31.stop();
                    }
                }
            }, null, this);
        }
    }], [{
        key: "requestSMSOTP",
        value: function requestSMSOTP(phoneNum) {
            var resp;
            return regeneratorRuntime.async(function requestSMSOTP$(_context32) {
                while (1) {
                    switch (_context32.prev = _context32.next) {
                        case 0:
                            if (!(phoneNum == null || phoneNum.length == 0)) {
                                _context32.next = 2;
                                break;
                            }

                            return _context32.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.INVALID_INPUT, UMeError.MSG_INVALID_INPUT)));

                        case 2:
                            _context32.next = 4;
                            return regeneratorRuntime.awrap(UMeUser.requestOTP(phoneNum, "PHONE"));

                        case 4:
                            resp = _context32.sent;

                            if (resp.isOk) {
                                _context32.next = 7;
                                break;
                            }

                            return _context32.abrupt("return", Promise.reject(new DroiBaaS.DroiError(resp.code, resp.appendMessage)));

                        case 7:
                            return _context32.abrupt("return", Promise.resolve(true));

                        case 8:
                        case "end":
                            return _context32.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: "createUser",
        value: function createUser() {
            return new UMeUser();
        }

        /**
         * Get the current UMeUser from cache. 從 cache 取得現在的 UMeUser。
         *
         * @static
         * @async
         * @return {UMeUser} Current UMeUser instance.
         */

    }, {
        key: "getUMeUser",
        value: function getUMeUser() {
            var user, duser;
            return regeneratorRuntime.async(function getUMeUser$(_context33) {
                while (1) {
                    switch (_context33.prev = _context33.next) {
                        case 0:
                            user = UMeUser.createUser();
                            duser = UMeUser.getCurrentUser();

                            if (!(duser != null && duser.isLoggedIn())) {
                                _context33.next = 8;
                                break;
                            }

                            console.log(" Cached user.");
                            user.cloneFrom(duser);
                            _context33.next = 7;
                            return regeneratorRuntime.awrap(user.sync());

                        case 7:
                            return _context33.abrupt("return", user);

                        case 8:
                            return _context33.abrupt("return", null);

                        case 9:
                        case "end":
                            return _context33.stop();
                    }
                }
            }, null, this);
        }

        /**
         * New UMeUser. 輸入 token 和 objectid 初始化 UMeUser。
         *
         * @static
         * @async
         * @param {string} token - User Session Token.
         * @param {string} id - User Object Id.
         * @return {UMeUser}
         * @throws {DroiError} 錯誤情況，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }, {
        key: "initUser",
        value: function initUser(token, id) {
            var user, duser, _duser;

            return regeneratorRuntime.async(function initUser$(_context34) {
                while (1) {
                    switch (_context34.prev = _context34.next) {
                        case 0:
                            user = UMeUser.createUser();
                            duser = UMeUser.getCurrentUser();

                            if (!(duser != null && duser.isLoggedIn())) {
                                _context34.next = 6;
                                break;
                            }

                            return _context34.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.ALREADY_LOGIN, UMeError.MSG_ALREADY_LOGIN)));

                        case 6:
                            _context34.prev = 6;
                            _context34.next = 9;
                            return regeneratorRuntime.awrap(UMeUser.setCurrentUserToken(id, token));

                        case 9:
                            _duser = _context34.sent;
                            //.then((duser) => {
                            user.cloneFrom(_duser);
                            _context34.next = 17;
                            break;

                        case 13:
                            _context34.prev = 13;
                            _context34.t0 = _context34["catch"](6);

                            console.log("setCurrentUserToken error: " + _context34.t0.toString());
                            throw _context34.t0;

                        case 17:

                            UMeUser.currentUser = user;
                            UMeUser.saveUserCache(user);
                            return _context34.abrupt("return", user);

                        case 20:
                        case "end":
                            return _context34.stop();
                    }
                }
            }, null, this, [[6, 13]]);
        }
    }]);

    return UMeUser;
}(DroiBaaS.DroiUser);

Object.defineProperty(UMeUser.prototype, "Nickname", {
    get: function get() {
        return this.getValue("Nickname");
    },
    set: function set(v) {
        this.setValue("Nickname", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Gender", {
    get: function get() {
        return this.getValue("Gender");
    },
    set: function set(v) {
        this.setValue("Gender", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Job", {
    get: function get() {
        return this.getValue("Job");
    },
    set: function set(v) {
        this.setValue("Job", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Education", {
    get: function get() {
        return this.getValue("Education");
    },
    set: function set(v) {
        this.setValue("Education", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "InviteCode", {
    get: function get() {
        return this.getValue("InviteCode");
    },
    set: function set(v) {
        this.setValue("InviteCode", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Age", {
    get: function get() {
        return this.getValue("Age");
    },
    set: function set(v) {
        this.setValue("Age", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Coin", {
    get: function get() {
        return this.getValue("Coin");
    },
    set: function set(v) {
        this.setValue("Coin", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Balance", {
    get: function get() {
        return this.getValue("Balance");
    },
    set: function set(v) {
        this.setValue("Balance", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "ExchangeRate", {
    get: function get() {
        return this.getValue("ExchangeRate");
    },
    set: function set(v) {
        this.setValue("ExchangeRate", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Sign", {
    get: function get() {
        return this.getValue("Sign");
    },
    set: function set(v) {
        this.setValue("Sign", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Icon", {
    get: function get() {
        return this.getValue("Icon");
    },
    set: function set(v) {
        this.setValue("Icon", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "LastLoginTime", {
    get: function get() {
        return this.getValue("LastLoginTime");
    },
    set: function set(v) {
        this.setValue("LastLoginTime", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Prev_user_id", {
    get: function get() {
        return this.getValue("Prev_user_id");
    },
    set: function set(v) {
        this.setValue("Prev_user_id", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Prev_user_token", {
    get: function get() {
        return this.getValue("Prev_user_token");
    },
    set: function set(v) {
        this.setValue("Prev_user_token", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Prev_need_bm_syn", {
    get: function get() {
        return this.getValue("Prev_need_bm_syn");
    },
    set: function set(v) {
        this.setValue("Prev_need_bm_syn", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "Bm_version", {
    get: function get() {
        return this.getValue("Bm_version");
    },
    set: function set(v) {
        this.setValue("Bm_version", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "CoinFromApprentice", {
    get: function get() {
        return this.getValue("CoinFromApprentice");
    },
    set: function set(v) {
        this.setValue("CoinFromApprentice", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "AwakeStatus", {
    get: function get() {
        return this.getValue("AwakeStatus");
    },
    set: function set(v) {
        this.setValue("AwakeStatus", v);
    },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UMeUser.prototype, "ActivateStatus", {
    get: function get() {
        return this.getValue("ActivateStatus");
    },
    set: function set(v) {
        this.setValue("ActivateStatus", v);
    },
    enumerable: true,
    configurable: false
});

/** Class representing a specific UserTask model. 用戶參與的任務
 *
 * @property {string}  UserObjectId   - 用戶_Id
 * @property {Task}  MetaTask  - 參與的任務
 * @property {boolean}  Finish - 是否完成
 * @property {Date}  FinishedDate - 任務完成時間
*/

var UserTask = function (_DroiBaaS$DroiObject16) {
    _inherits(UserTask, _DroiBaaS$DroiObject16);

    /**
     * Create a AnnouncUserTaskement.
     * 不應該從H5 app client 創建此物件
     * @constructor
     */
    function UserTask() {
        _classCallCheck(this, UserTask);

        return _possibleConstructorReturn(this, (UserTask.__proto__ || Object.getPrototypeOf(UserTask)).call(this, "UserTask"));
    }
    /**
     * Create a UserTask.
     * @static
     * @return {UserTask} New UserTask instance.
     */


    _createClass(UserTask, [{
        key: "save",


        /**
         * block save operation on H5 client.
         * @override
         */
        value: function save() {}
        // donothing

        /**
         *  block delete operation on H5 client.
         * @override
         */

    }, {
        key: "delete",
        value: function _delete() {}
        // donothing


        /**
         * Get UserTask list of the current user. 查詢現在使用者任務清單。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @return {Array.<UserTask>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }], [{
        key: "createObject",
        value: function createObject() {
            return new UserTask();
        }
    }, {
        key: "getUserTaskList",
        value: function getUserTaskList(limit, offset) {
            var user, cond;
            return regeneratorRuntime.async(function getUserTaskList$(_context35) {
                while (1) {
                    switch (_context35.prev = _context35.next) {
                        case 0:
                            user = UMeUser.getCurrentUser();

                            if (!(user == null || !user.isLoggedIn() || user.isAnonymous())) {
                                _context35.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context35.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond = DroiBaaS.DroiCondition.eq("UserObjectId", user.objectId());
                            return _context35.abrupt("return", query("UserTask", cond, limit, offset, defaultOrder));

                        case 6:
                        case "end":
                            return _context35.stop();
                    }
                }
            }, null, this);
        }
        /**
         * Get "input:finished" UserTask list of the current user. 查詢現在使用者結束/未結束任務清單。按照_ModifiedTime欄位降序排列(最新到最舊)
         * @async
         * @static
         * @param {number} limit - The return amount of this request.
         * @param {number} offset - The query offset of this request.
         * @param {boolean} finished - The finished condition.
         * @return {Array.<UserTask>} - The list of selected object.
         * @throws {DroiError} 使用者為匿名用戶會回傳錯誤，可使用 error.code 取得錯誤碼和 error.appendMessage 取得錯誤訊息
         */

    }, {
        key: "getFinishedUserTaskList",
        value: function getFinishedUserTaskList(limit, offset, finished) {
            var user, cond1, cond2, andCond;
            return regeneratorRuntime.async(function getFinishedUserTaskList$(_context36) {
                while (1) {
                    switch (_context36.prev = _context36.next) {
                        case 0:
                            user = UMeUser.getCurrentUser();

                            if (!(user == null || !user.isLoggedIn() || user.isAnonymous())) {
                                _context36.next = 4;
                                break;
                            }

                            console.log("Current user is null or not log-in or is anonymouse");
                            return _context36.abrupt("return", Promise.reject(new DroiBaaS.DroiError(UMeError.NOT_LOGIN, UMeError.MSG_NOT_LOGIN)));

                        case 4:
                            cond1 = DroiBaaS.DroiCondition.eq("UserObjectId", user.objectId());
                            cond2 = DroiBaaS.DroiCondition.eq("Finish", finished);
                            andCond = cond1.and(cond2);
                            return _context36.abrupt("return", query("UserTask", andCond, limit, offset, defaultOrder));

                        case 8:
                        case "end":
                            return _context36.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return UserTask;
}(DroiBaaS.DroiObject);

Object.defineProperty(UserTask.prototype, "UserObjectId", {
    get: function get() {
        return this.getValue("UserObjectId");
    },
    // set: function(v) {
    //     this.setValue("UserObjectId", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UserTask.prototype, "MetaTask", {
    get: function get() {
        return this.getValue("MetaTask");
    },
    // set: function(v) {
    //     this.setValue("MetaTask", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UserTask.prototype, "Finish", {
    get: function get() {
        return this.getValue("Finish");
    },
    // set: function(v) {
    //     this.setValue("Finish", v);
    // },
    enumerable: true,
    configurable: false
});

Object.defineProperty(UserTask.prototype, "FinishedDate", {
    get: function get() {
        return this.getValue("FinishedDate");
    },
    // set: function(v) {
    //     this.setValue("FinishedDate", v);
    // },
    enumerable: true,
    configurable: false
});